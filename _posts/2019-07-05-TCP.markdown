---
layout: post
title: "TCP协议"
date: 2019-07-04 01:10:42
categories: Network
---
TCP为传输层协议，为了保证数据在网络中的可靠传输。

## TCP特点

+ 需要建立连接，一对一的连接；
+ 支持全双工通信；
+ 保证数据可靠传输；
+ 可以进行流量控制；
+ 可以进行拥塞控制。

## TCP报文格式

一个TCP数据段由首部和数据部分组成。

`TCP segment = TCP header + Data chunk`

![TCP-Header-Format.png](./assets/img/tcp/TCP-Header-Format.png)

[图片来源](
https://www.gatevidyalay.com/transmission-control-protocol-tcp-header/)

**头部各部分说明:**

+ 源端口与目标端口各占16位(两个字节)
+ 序列号:占32位，指明了这个数据报文段中的数据的第一个字节在整个待发送数据中的序号
+ 确认号:32位，表明了接收方希望发送方下次发送数据的序号，确认号总是最后一次接收到的数据的序号+1
+ 首部长度:指明了整个首部的长度，标明实际传输数据的位置；最小首部长度为20字节，最大首部长度为60字节(包括基本的20字节和可选的40字节)，由于只使用了4位表示，最大可表示的数字为15，因此实际的首部长度需要该值乘以缩放比例4
+ 保留位:没有被使用
+ URG标识位:用于紧急处理一段数据，如果被设置为1，表示这段数据需要加急处理
+ ACK标识位:指明确认号字段是否有用，处理发起连接的请求段，其余的数据段，该位置都被设置为1
+ PSH标识位:当该位置被设置为1时，缓冲区中的所有数据段被立即推给接收应用，缓冲区立即完全释放
+ RST标识位:该位置被设置为1时，指明接收端需要立即终止连接，它造成收发两方不正常的立即释放连接和所有资源，两方的数据传输都被终止，可能导致正在传输数据的丢失，通常仅在出现不可恢复错误或是无法正常终止连接的情况下使用
+ SYN标识:设置为1，表示接收方收到的数据包中的序列号是初始序列号，在建立连接的过程中发送的连接请求，和对请求的确认，该位置都设置为1
+ FIN标识:在终止连接时使用，设置为1时，告诉接收方，发送方想要终止连接
+ 窗口大小:表明发送方的接收窗口的大小，在流量控制中使用
+ 校验和:验证数据包的完整性
+ Urgent指针:指明从第一个字节开始有多少数据是紧急的
+ 可选数据:通常的用途为:时间戳、窗口大小扩展、参数协商、填充

## 序列号与循环使用

由于序列号使用32位，最多可以有2^32个数字可以使用，加入初始序列号为0，在发送完4GB数据后，序列号全部被使用，此时需要继续发送更多数据，需要从开始继续循环利用序列号传输数据。

通常，
+ 如果初始序列号是X，
+ 然后序列号将使用X到2^32-1，在然后使用0到X-1，
+ 然后序列号循环，发送更多数据。

## TCP建立连接

![3-way-handshake.jpg](./assets/img/tcp/3-way-handshake.jpg)

1. 客户端发送一个建立连接的请求，请求只有TCP首部，没有数据，请求segment的同步标志位被设置为1，初始化一个序列号x，并且请求段中还指明了最大段大小(Maximum segment size)与接收窗口大小(receiving window size),客户端发出请求后，由`closed`状态转为`syn-sent`状态。
2. 在收到请求segment后，服务端向客户端发出响应，返回一个ack segment，这个segment向客户端说明了服务端的相关参数，这个数据segment包含了syn同步标志、初始的序列号`y`，最大段大小、接收窗口大小、ack确认号(请求数据的序列号+1)，ACK确认标志设置为1；服务端在返回确认后，状态由`listen`转为`syn-rcvd`
3. 客户端在收到服务端的确认后，状态由`syn-sent`转为`established`，在发送一次对确认的确认，此segment的同步位SYN设置为0，ACK位为1，序列号为`x+1`(由于上次的确认的ack为`x+1`表明接收方想接收`x+1`序列号的数据)，确认号ack为`y+1`，当服务端收到该确认segment后，服务端也完成连接的建立，状态变为`establish`

**注：可以通过netstat在windows上查看会话建立的情况。**

在第一步与第二步完成后，在客户端完成了连接的建立，与必要的参数协商；而在第二步与第三步完成后，在服务端完成了连接的建立，并且协商了连接参数。

**why三次握手：**当客户端发出请求后，服务端发出确认，假如确认丢失，客户端以为服务端拒绝了连接，而服务端已经建立连接等待客户端发送数据，此时服务端会空等，浪费服务端资源，所以需要再一次的对确认发出确认，保证服务端不会空等。

## TCP可靠传输

### 停止等待协议与超时重传

#### 数据包丢失

![Problem-of-Lost-Data-Stop-and-Wait-ARQ.png](./assets/img/tcp/Problem-of-Lost-Data-Stop-and-Wait-ARQ.png)

在每次发送数据后，发送方都会启动一个计时器，如果数据在传输过程中丢失，那么在计时器到期后，仍然不能收到确认，发送方将重新传输数据包。

#### 确认丢失

![Problem-of-Lost-Acknowledgement-Stop-and-Wait-ARQ-1.png](./assets/img/tcp/Problem-of-Lost-Acknowledgement-Stop-and-Wait-ARQ-1.png)

如果接收方正常收到数据，返回确认，但是确认在返回的过程中丢失，那么发送方在计时器到期后因不能收到确认，而重传数据包，接收方收到重复数据后，丢弃，并再次返回确认。

#### 延迟确认

![Problem-of-delayed-Acknowledgement-Stop-and-Wait-ARQ-1.png](./assets/img/tcp/Problem-of-delayed-Acknowledgement-Stop-and-Wait-ARQ-1.png)

发送方因为确认延迟，计时器到期而重传数据，发送方将收到重复的确认，当收到重复确认时，丢弃。

#### 错误数据包

如果接收方收到错误数据包，将返回NAK否定确认，请求发送方重发数据。

### 滑动窗口协议

由于停止等待协议的信道利用率太低，采用了滑动窗口协议，使得发送方每次发送数据时，不需要每个数据包发完都停止等待确认，而是继续发送窗口内的数据，当收到确认后，就将窗口向前滑动，继续发送数据。滑动窗口的两种实现为:`Go back N Protocol`和`Selective Repeat Protocol`。

#### Go back N Protocol

1. 在Go back N中，发送方的窗口大小为N，而接收方的窗口大小固定为1.
2. 使用累积确认，每当接收方收到一个新的数据包时，它开启一个计时器，当计时器到期时，它发送所有未被确认的数据包的累积确认。
3. Go back N也可以使用独立的确认。
4. Go back N不接受损坏数据包，丢弃它们。
5. Go back N不接受无序的数据包，丢弃它们。
6. 如果有任何数据包没有接收到ACK，发送方将整个窗口都重传。
7. Go back N将重传丢失的数据，在计时器到期后。

#### Selective Repeat Protocol

1. 在SR协议中，发送方窗口大小与接收方窗口大小相等。
2. SR协议接收单独的确认。
3. SR不接受受损数据，丢弃它们。
4. SR运行数据包无序。
5. SR的接收方必须可以对数据包进行排序。
6. SR协议可以在发送方进行搜索。
7. SR在超时计时器到期重传丢失数据。

## TCP的拥塞控制

![congestion-control.jpg](./assets/img/tcp/congestion-control.jpg)

### 慢开始

在开始时发送方设定拥塞窗口cwnd为一个最大段大小(1MSS)，而在每次收到一个确认后，发送方就将拥塞窗口增加1MSS，这个阶段拥塞窗口呈指数增长。

### 拥塞避免

在拥塞窗口达到阈值后，发送方线性增加拥塞窗口，避免拥塞，在发送方每收到一个确认后，拥塞窗口就增加1.直到拥塞窗口大小与接收窗口大小相等。

### 拥塞检测

当发送方检测到segment丢失，根据丢失不同采取不同措施。

+ 如果因为超时计时器到期还未收到确认，说明网络有极大可能拥塞，此时发送方将设置慢开始阈值为当前拥塞窗口的一半，将拥塞窗口的大小减小到1MSS，恢复慢开始阶段。
+ 如果发送方收到三个重复的确认，暗示网络可能拥塞了，发送方设置慢开始阈值为当前拥塞窗口的一半，拥塞窗口设为慢开始阈值，恢复拥塞避免阶段。

## TCP关闭连接

![connection-termination.png](./assets/img/tcp/connection-termination.png)

1. 客户端发送FIN段，告知服务端自己将关闭连接，客户端进入`FIN-WAIT-1`状态，并等待服务端的确认。
2. 服务端收到FIN请求后，服务端释放缓存，并返回一个确认，服务端进入`CLOSE-WAIT`状态。 客户端收到确认后，进入`FIN-WAIT-2`状态，此时从客户端到服务端的连接终止，客户端不能发送数据到服务端，因为缓存已经释放，但是客户端仍然可以发送不带数据的确认，从服务端到客户端的连接仍然open，服务端可以继续发送数据。
3. 当服务端发送FIN段，告知客服端我将关闭连接，服务端进入`LAST-ACK`状态。
4. 客户端收到FIN请求后，它将释放缓存，返回确认，客户端进入`TIME-WAIT`状态。
5. 在`TIME-WAIT`状态，客户端可以重发确认，当最后确认丢失时，`TIME-WAIT`状态的时间取决于实现，可能为30s、1m、2m，服务端收到最后确认后关闭连接，等待后客户端也关闭。

## 参考

[TCP Header | TCP Header Format | TCP Flags](https://www.gatevidyalay.com/transmission-control-protocol-tcp-header/)<br>
[TCP Sequence Number | Wrap Around Time](https://www.gatevidyalay.com/tcp-sequence-number-wrap-around-concept/)<br>
[3 Way Handshake | TCP Connection](https://www.gatevidyalay.com/three-way-handshake-tcp-connection-establishment/)<br>
[Stop and Wait ARQ | Sliding Window Protocols](https://www.gatevidyalay.com/stop-and-wait-arq-sliding-window-protocols/)<br>
[Go back N | Sliding Window Protocol](https://www.gatevidyalay.com/go-back-n-sliding-window-protocol/)<br>
[TCP流量控制与拥塞控制](https://andrewpqc.github.io/2018/07/21/tcp-flow-control-and-congestion-control/)<br>
